name: Release to PyPI

on:
  workflow_dispatch:
  push:
    branches:
      - main
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11.5

      - name: Install dependencies with Yarn
        run: yarn install --frozen-lockfile --production=false

      - name: build the javascript bundle
        run: |
          yarn build
          # Force Git to track the build file temporarily
          git add -f src/genstudio/js/widget_build.js

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Install deps
        run: poetry install --without dev

      - name: Set version components
        id: versions
        run: |
          # Check if current commit has a tag
          HAS_TAG=$(git tag --points-at HEAD)

          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" && -z "$HAS_TAG" ]]; then
            # For dev versions, use YYYY.M.D.HHMM.dev0 format
            BASE_VERSION=$(date +'%Y.%-m.%-d')
            TIME_VERSION=$(date +'%-H%M')
            # Use time as patch version with dev0 suffix
            PYTHON_VERSION="${BASE_VERSION}.${TIME_VERSION}.dev0"
            NPM_VERSION="${BASE_VERSION}-dev${TIME_VERSION}"
            echo "IS_DEV=true" >> $GITHUB_OUTPUT
            # Update version in pyproject.toml for dev releases
            poetry version ${PYTHON_VERSION}
          else
            # For release versions, use the existing version
            PYTHON_VERSION=$(poetry version -s)
            NPM_VERSION=$PYTHON_VERSION
            echo "IS_DEV=false" >> $GITHUB_OUTPUT
          fi

          echo "PYTHON_VERSION=${PYTHON_VERSION}" >> $GITHUB_OUTPUT
          echo "NPM_VERSION=${NPM_VERSION}" >> $GITHUB_OUTPUT

      - name: Update version query params in widget.py
        run: |
          VERSION=${{ steps.versions.outputs.PYTHON_VERSION }}
          python scripts/update_asset_versions.py $VERSION

      - name: Update widget URL and build Python package
        run: |
          NPM_BASE="https://cdn.jsdelivr.net/npm/@probcomp/genstudio@${{ steps.versions.outputs.NPM_VERSION }}/dist"
          JSDELIVR_JS_URL="${NPM_BASE}/widget_build.js"
          JSDELIVR_CSS_URL="${NPM_BASE}/widget.css"

          # Update both URLs in the source
          sed -i "s|CDN_SCRIPT_URL = None|CDN_SCRIPT_URL = \"${JSDELIVR_JS_URL}\"|" src/genstudio/util.py
          sed -i "s|CDN_CSS_URL = None|CDN_CSS_URL = \"${JSDELIVR_CSS_URL}\"|" src/genstudio/util.py

          poetry build

          git checkout src/genstudio/util.py

      - name: Deploy to PyPI
        run: |
          echo "=== Checking build artifacts ==="
          ls -la dist/
          echo "=== Publishing to PyPI ==="
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish

      - name: Create GitHub Release
        if: steps.versions.outputs.IS_DEV == 'false'
        uses: softprops/action-gh-release@v1
        with:
          body_path: docs/CHANGELOG.md
          files: |
            dist/*

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: |
          npm version ${{ steps.versions.outputs.NPM_VERSION }} --no-git-tag-version

          # Copy both files to npm dist directory
          mkdir -p dist
          cp src/genstudio/js/widget_build.js dist/
          cp src/genstudio/widget.css dist/

          echo "Publishing npm package version ${{ steps.versions.outputs.NPM_VERSION }}"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
