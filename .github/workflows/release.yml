name: Release to Artifact Registry

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*.alpha*'
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: 'write'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11.5

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.ARTIFACT_REGISTRY_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install dependencies with Yarn
        run: yarn install --frozen-lockfile --production=false

      - name: build the javascript bundle
        run: |
          yarn build
          # Force Git to track the build file temporarily
          git add -f src/genstudio/js/widget_build.js

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Configure deploy keys
        run: |
          poetry self add keyrings.google-artifactregistry-auth
          poetry config repositories.gcp https://us-west1-python.pkg.dev/probcomp-caliban/probcomp/

      - name: Check if triggered by push to main
        id: check_trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEV_CHANNEL=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.*\.alpha ]]; then
            echo "ALPHA_CHANNEL=true" >> $GITHUB_OUTPUT
          else
            echo "DEV_CHANNEL=false" >> $GITHUB_OUTPUT
            echo "ALPHA_CHANNEL=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current date and time
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true'
        id: datetime
        run: |
          echo "NEXT_VERSION=$(date +'%Y.%m.%d.%H%M.dev')" >> $GITHUB_ENV

      - name: Extract version from tag for alpha releases
        if: steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEXT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true' || steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          poetry version ${{ env.NEXT_VERSION }}

      - name: Update version query params in widget.py
        run: |
          VERSION=$(poetry version -s)
          python scripts/update_asset_versions.py $VERSION

      - name: Install deps
        run: poetry install --without dev

      - name: Update widget URL and build Python package
        run: |
          VERSION=$(poetry version -s)

          # Convert to npm version format if it's a dev version
          if [[ $VERSION == *.dev ]]; then
            NPM_VERSION="0.0.0-dev.$(echo $VERSION | sed 's/\.dev$//' | tr '.' '')"
          else
            NPM_VERSION=$VERSION
          fi

          JSDELIVR_URL="https://cdn.jsdelivr.net/npm/@probcomp/genstudio@${NPM_VERSION}/dist/widget_build.js"

          # Create a temporary build directory
          mkdir -p build/genstudio
          cp -r src/genstudio/* build/genstudio/

          # Update the widget URL in the build copy
          sed -i "s|_esm = WIDGET_URL|_esm = \"${JSDELIVR_URL}\"|" build/genstudio/widget.py

          # Build from the modified source
          poetry build --source-directory build

          # Clean up
          rm -rf build

      - name: Deploy to Artifact Registry
        run: |
          echo "=== Checking build artifacts ==="
          ls -la dist/
          echo "=== Publishing ==="
          poetry publish --repository gcp

      - name: Create GitHub Release
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'false'
        uses: softprops/action-gh-release@v1
        with:
          body_path: docs/CHANGELOG.md
          files: |
            dist/*

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: |
          VERSION=$(poetry version -s)

          # Convert Python version to npm-compatible version
          if [[ $VERSION == *.dev ]]; then
            # For dev versions, use 0.0.0-dev.YYYYMMDD.HHMM
            NPM_VERSION="0.0.0-dev.$(echo $VERSION | sed 's/\.dev$//' | tr '.' '')"
          else
            # For release versions, keep as is (assuming they're already semver)
            NPM_VERSION=$VERSION
          fi

          # Update package.json version to match npm version
          npm version $NPM_VERSION --no-git-tag-version

          # Copy the bundle to a more standard location for npm
          mkdir -p dist
          cp src/genstudio/js/widget_build.js dist/

          echo "Publishing npm package version $NPM_VERSION"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
