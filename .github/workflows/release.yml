name: Release to Artifact Registry

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*.alpha*'
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: 'write'
      id-token: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11.5

      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{ secrets.ARTIFACT_REGISTRY_KEY }}"

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Install dependencies with Yarn
        run: yarn install --frozen-lockfile --production=false

      - name: build the javascript bundle
        run: |
          mkdir -p src/genstudio/js
          echo "=== Directory before build ==="
          ls -la src/genstudio/js/
          yarn build
          echo "=== Directory after build ==="
          ls -la src/genstudio/js/
          echo "=== File contents if exists ==="
          if [ -f src/genstudio/js/widget_build.js ]; then
            echo "widget_build.js exists"
            stat src/genstudio/js/widget_build.js
          else
            echo "widget_build.js does not exist"
            echo "Current directory contents:"
            find src/genstudio -type f
          fi
          echo "=== JS build complete ==="

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Configure deploy keys
        run: |
          poetry self add keyrings.google-artifactregistry-auth
          poetry config repositories.gcp https://us-west1-python.pkg.dev/probcomp-caliban/probcomp/

      - name: Install deps
        run: |
          # Install with --no-root first to get dependencies
          poetry install --no-root
          # Then install the local package
          poetry install

      - name: Check if triggered by push to main
        id: check_trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEV_CHANNEL=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.*\.alpha ]]; then
            echo "ALPHA_CHANNEL=true" >> $GITHUB_OUTPUT
          else
            echo "DEV_CHANNEL=false" >> $GITHUB_OUTPUT
            echo "ALPHA_CHANNEL=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current date and time
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true'
        id: datetime
        run: |
          echo "NEXT_VERSION=$(date +'%Y.%m.%d.%H%M.dev')" >> $GITHUB_ENV

      - name: Extract version from tag for alpha releases
        if: steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEXT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true' || steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          poetry version ${{ env.NEXT_VERSION }}

      - name: Update version query params in widget.py
        run: |
          VERSION=$(poetry version -s)
          python scripts/update_asset_versions.py $VERSION

      - name: Deploy to Artifact Registry
        run: |
          echo "=== Building package ==="
          poetry build --verbose
          echo "=== Checking build artifacts ==="
          ls -la dist/
          echo "=== Checking wheel contents ==="
          unzip -l dist/genstudio-*.whl | grep widget_build.js
          echo "=== Publishing ==="
          poetry publish --repository gcp

      - name: Create GitHub Release
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'false'
        uses: softprops/action-gh-release@v1
        with:
          body_path: docs/CHANGELOG.md
          files: |
            dist/*
