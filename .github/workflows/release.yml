name: Release to PyPI

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'
      - 'v*.*.*.alpha*'
  release:
    types: [published]

jobs:
  release:
    runs-on: ubuntu-latest

    permissions:
      contents: 'write'

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v4
        with:
          python-version: 3.11.5

      - name: Install dependencies with Yarn
        run: yarn install --frozen-lockfile --production=false

      - name: build the javascript bundle
        run: |
          yarn build
          # Force Git to track the build file temporarily
          git add -f src/genstudio/js/widget_build.js

      - name: Install and configure Poetry
        uses: snok/install-poetry@v1

      - name: Check if triggered by push to main
        id: check_trigger
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "DEV_CHANNEL=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" =~ ^refs/tags/v.*\.alpha ]]; then
            echo "ALPHA_CHANNEL=true" >> $GITHUB_OUTPUT
          else
            echo "DEV_CHANNEL=false" >> $GITHUB_OUTPUT
            echo "ALPHA_CHANNEL=false" >> $GITHUB_OUTPUT
          fi

      - name: Get current date and time
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true'
        id: datetime
        run: |
          echo "NEXT_VERSION=$(date +'%Y.%m.%d.%H%M.dev')" >> $GITHUB_ENV

      - name: Extract version from tag for alpha releases
        if: steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "NEXT_VERSION=$VERSION" >> $GITHUB_ENV

      - name: Update version in pyproject.toml
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'true' || steps.check_trigger.outputs.ALPHA_CHANNEL == 'true'
        run: |
          poetry version ${{ env.NEXT_VERSION }}

      - name: Update version query params in widget.py
        run: |
          VERSION=$(poetry version -s)
          python scripts/update_asset_versions.py $VERSION

      - name: Install deps
        run: poetry install --without dev

      - name: Update widget URL and build Python package
        run: |
          VERSION=$(poetry version -s)

          if [[ $VERSION == *.dev ]]; then
            DATE_TIME=$(echo $VERSION | sed 's/\.dev$//')
            NPM_VERSION="0.0.0-dev.$(echo $DATE_TIME | sed 's/\.//g')"
          else
            NPM_VERSION=$VERSION
          fi

          NPM_BASE="https://cdn.jsdelivr.net/npm/@probcomp/genstudio@${NPM_VERSION}/dist"
          JSDELIVR_JS_URL="${NPM_BASE}/widget_build.js"
          JSDELIVR_CSS_URL="${NPM_BASE}/widget.css"

          # Update both URLs in the source
          sed -i "s|CDN_SCRIPT_URL = None|CDN_SCRIPT_URL = \"${JSDELIVR_JS_URL}\"|" src/genstudio/util.py
          sed -i "s|CDN_CSS_URL = None|CDN_CSS_URL = \"${JSDELIVR_CSS_URL}\"|" src/genstudio/util.py

          poetry build

          git checkout src/genstudio/util.py

      - name: Deploy to PyPI
        run: |
          echo "=== Checking build artifacts ==="
          ls -la dist/
          echo "=== Publishing to PyPI ==="
          poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}
          poetry publish

      - name: Create GitHub Release
        if: steps.check_trigger.outputs.DEV_CHANNEL == 'false'
        uses: softprops/action-gh-release@v1
        with:
          body_path: docs/CHANGELOG.md
          files: |
            dist/*

      - name: Setup Node.js for npm publishing
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: Publish to npm
        run: |
          VERSION=$(poetry version -s)

          if [[ $VERSION == *.dev ]]; then
            DATE_TIME=$(echo $VERSION | sed 's/\.dev$//')
            NPM_VERSION="0.0.0-dev.$(echo $DATE_TIME | sed 's/\.//g')"
          else
            NPM_VERSION=$VERSION
          fi

          npm version $NPM_VERSION --no-git-tag-version

          # Copy both files to npm dist directory
          mkdir -p dist
          cp src/genstudio/js/widget_build.js dist/
          cp src/genstudio/widget.css dist/

          echo "Publishing npm package version $NPM_VERSION"
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
